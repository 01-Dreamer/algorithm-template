#include<iostream>
#include<cstring>
#include<vector>

using namespace std;
const int N=5e5+10,M=4e6+10;
int h[N],e[M],ne[M],idx;
int low[N],dfn[N],timestamp;
int id[N],dcc_cnt;
int stk[N],top;
bool is_bridge[M];
vector<int>dcc[N];
int n,m;

void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}

void tarjan(int u,int from)
{
    low[u]=dfn[u]=++timestamp;
    stk[++top]=u;

    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j,i);
            low[u]=min(low[u],low[j]);
            if(low[u]<dfn[j]) is_bridge[i]=is_bridge[i^1]=true;
        }
        else if(i!=(from^1)) low[u]=min(low[u],dfn[j]);
    }

    if(dfn[u]==low[u])
    {
        dcc_cnt++;
        int y;
        do
        {
            y=stk[top--];
            id[y]=dcc_cnt;
            dcc[dcc_cnt].push_back(y);
        }while(y!=u);
    }
}


int main()
{
    scanf("%d%d",&n,&m);

    memset(h,-1,sizeof h);
    int a,b;
    while(m--)
    {
        scanf("%d%d",&a,&b);
        add(a,b);
        add(b,a);
    }

    for(int i=1;i<=n;i++)
       if(!dfn[i])
          tarjan(i,-1);

    printf("%d\n",dcc_cnt);

    for(int i=1;i<=dcc_cnt;i++)
    {
        printf("%d ",dcc[i].size());
        for(int v:dcc[i]) printf("%d ",v);
        puts("");
    }
    
    return 0;
}