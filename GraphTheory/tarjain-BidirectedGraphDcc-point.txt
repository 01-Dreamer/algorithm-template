#include<iostream>
#include<cstring>
#include<vector>

using namespace std;
typedef unsigned long long ULL;
const int N=1010;
int h[N],e[N],ne[N],idx;
int low[N],dfn[N],timestamp;
int stk[N],top;
bool cut[N];
vector<int>dcc[N];
int dcc_cnt;
int n,m;

void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}

int root;
void tarjan(int u)
{
    low[u]=dfn[u]=++timestamp;
    stk[++top]=u;
    
    if(u==root&&h[u]==-1)
    {
        dcc_cnt++;
        dcc[dcc_cnt].push_back(u);
        return;
    }
    
    int cnt=0;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
            if(dfn[u]<=low[j])
            {
                cnt++;
                if(u!=root||cnt>1) cut[u]=true;
                dcc_cnt++;
                int y;
                do
                {
                    y=stk[top--];
                    dcc[dcc_cnt].push_back(y);
                }while(y!=j);
                dcc[dcc_cnt].push_back(u);
            }
        }
        else low[u]=min(low[u],dfn[j]);
    }
}


int main()
{
    int C=1;
    while(scanf("%d",&m),m)
    {
        for(int i=1;i<=dcc_cnt;i++) dcc[i].clear();
        n=idx=dcc_cnt=timestamp=0;
        memset(h,-1,sizeof h);
        memset(dfn,0,sizeof dfn);
        memset(cut,false,sizeof cut);
        
        int a,b;
        while(m--)
        {
            scanf("%d%d",&a,&b);
            add(a,b);
            add(b,a);
            n=max(n,a);
            n=max(n,b);
        }
        
        for(root=1;root<=n;root++)
           if(!dfn[root])
              tarjan(root);
        
        int res1=0;
        ULL res2=1;
        for(int i=1;i<=dcc_cnt;i++)
        {
            int cnt=0;
            for(int j=0;j<dcc[i].size();j++)
               cnt+=cut[dcc[i][j]];
               
            if(cnt==0)
            {
                if(dcc[i].size()>1) res1+=2,res2*=dcc[i].size()*(dcc[i].size()-1)/2;
                else res1++;
            }
            else if(cnt==1) res1++,res2*=dcc[i].size()-1;
               
        }
        
        printf("Case %d: %d %llu\n",C++,res1,res2);
    }
    
    
    return 0;
}